#include "tsqr_df.h"
using namespace std;

void PrintMatrix(float A[ROWS][COLS])
{
	for (int i = 0; i < ROWS; ++i)
	{
		for (int j = 0; j < COLS; ++j)
		{
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
}

void PrintMatrixSquare(float A[ROWS][ROWS])
{
	for (int i = 0; i < ROWS; ++i)
	{
		for (int j = 0; j < ROWS; ++j)
		{
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
}

void MM(float A[ROWS][ROWS], float B[ROWS][COLS], float C[ROWS][COLS])
{
	for (int i = 0; i < ROWS; ++i)
	{
		for (int j = 0; j < COLS; ++j)
		{
			float res = 0;
			for (int k = 0; k < COLS; ++k)
			{
				res += A[i][k] * B[k][j];
			}
			C[i][j] = res;
		}
	}

	cout << endl;
}

void MakeEye(float A[ROWS][ROWS])
{
	for (int i = 0; i < ROWS; ++i)
	{
		for (int j = 0; j < ROWS; ++j)
		{
			if (i == j)
				A[i][j] = 1;
			else
				A[i][j] = 0;
		}
	}
}

int main()
{
	int qr_GR_success = 0;
	// 4
	//MATRIX_T A1[LEN] = {1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10};
	//MATRIX_T A2[LEN] = {10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1};
	// 8
	//MATRIX_T A1[LEN] = {1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36};
	//MATRIX_T A2[LEN] = {36 , 35 , 34 , 33 , 32 , 31 , 30 , 29 , 28 , 27 , 26 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1};
	// 12
//	MATRIX_T A1[LEN] = {242 , 135 , 120 , 123 , 194 , 234 , 120 , 125 , 216 , 34 , 182 , 215 , 244 , 1 , 66 , 100 , 237 , 201 , 180 , 155 , 28 , 199 , 13 , 140 , 208 , 56 , 68 , 194 , 12 , 105 , 245 , 4 , 23 , 38 , 178 , 103 , 96 , 86 , 91 , 118 , 142 , 244 , 174 , 80 , 106 , 225 , 111 , 89 , 114 , 217 , 100 , 224 , 75 , 77 , 195 , 92 , 38 , 221 , 167 , 200 , 214 , 78 , 218 , 198 , 172 , 138 , 75 , 85 , 145 , 96 , 128 , 70 , 111 , 61 , 247 , 75 , 25 , 153};
//	MATRIX_T A2[LEN] = {87 , 252 , 172 , 93 , 131 , 192 , 154 , 69 , 127 , 208 , 232 , 177 , 186 , 199 , 156 , 36 , 62 , 120 , 210 , 139 , 185 , 93 , 175 , 177 , 136 , 238 , 136 , 99 , 187 , 233 , 16 , 121 , 48 , 239 , 221 , 101 , 11 , 162 , 239 , 122 , 169 , 216 , 232 , 247 , 220 , 133 , 238 , 83 , 112 , 37 , 95 , 194 , 135 , 191 , 240 , 55 , 69 , 32 , 232 , 71 , 97 , 24 , 192 , 63 , 184 , 212 , 217 , 144 , 86 , 116 , 73 , 197 , 33 , 60 , 21 , 220 , 108 , 184};	// 16
	// 16
	 MATRIX_T A1[LEN] = {165 , 225 , 240 , 200 , 99 , 7 , 174 , 226 , 75 , 10 , 152 , 31 , 118 , 4 , 151 , 53 , 41 , 154 , 206 , 128 , 196 , 76 , 223 , 217 , 124 , 74 , 64 , 176 , 3 , 125 , 176 , 163 , 54 , 217 , 96 , 75 , 18 , 238 , 213 , 109 , 169 , 237 , 73 , 42 , 108 , 89 , 245 , 205 , 226 , 145 , 94 , 135 , 197 , 243 , 186 , 199 , 140 , 206 , 194 , 207 , 9 , 109 , 247 , 167 , 189 , 16 , 125 , 51 , 132 , 153 , 167 , 93 , 188 , 179 , 138 , 80 , 28 , 24 , 109 , 87 , 216 , 174 , 216 , 44 , 179 , 242 , 139 , 126 , 206 , 222 , 168 , 130 , 191 , 149 , 252 , 183 , 5 , 159 , 80 , 46 , 74 , 72 , 115 , 32 , 90 , 11 , 169 , 204 , 63 , 117 , 214 , 66 , 122 , 27 , 63 , 235 , 239 , 92 , 203 , 78 , 116 , 95 , 190 , 80 , 35 , 174 , 254 , 133 , 240 , 152 , 201 , 42 , 222 , 59 , 207 , 68};
	 MATRIX_T A2[LEN] = {34 , 108 , 120 , 129 , 94 , 77 , 202 , 8 , 82 , 136 , 23 , 204 , 86 , 230 , 201 , 108 , 119 , 11 , 238 , 110 , 91 , 139 , 31 , 103 , 59 , 139 , 21 , 131 , 133 , 145 , 115 , 255 , 125 , 110 , 129 , 235 , 42 , 244 , 127 , 125 , 35 , 98 , 16 , 34 , 210 , 199 , 220 , 59 , 8 , 212 , 49 , 46 , 83 , 47 , 65 , 201 , 195 , 48 , 238 , 77 , 76 , 162 , 183 , 85 , 7 , 6 , 175 , 34 , 167 , 46 , 209 , 184 , 21 , 209 , 211 , 24 , 83 , 126 , 155 , 64 , 155 , 223 , 176 , 93 , 78 , 90 , 220 , 73 , 158 , 34 , 67 , 201 , 104 , 83 , 126 , 79 , 190 , 136 , 125 , 239 , 183 , 136 , 57 , 104 , 146 , 231 , 208 , 225 , 88 , 171 , 191 , 239 , 39 , 140 , 116 , 86 , 171 , 238 , 87 , 240 , 172 , 55 , 125 , 155 , 126 , 133 , 56 , 7 , 13 , 176 , 215 , 40 , 248 , 90 , 175 , 120};
//	 24
//	MATRIX_T A1[LEN] = {196 , 123 , 240 , 238 , 241 , 100 , 222 , 131 , 60 , 241 , 58 , 148 , 125 , 67 , 133 , 106 , 56 , 135 , 233 , 190 , 95 , 123 , 140 , 109 , 20 , 161 , 255 , 167 , 195 , 193 , 251 , 11 , 217 , 84 , 111 , 246 , 119 , 111 , 108 , 132 , 177 , 73 , 174 , 155 , 236 , 37 , 56 , 58 , 94 , 101 , 169 , 93 , 213 , 15 , 42 , 47 , 241 , 105 , 97 , 63 , 116 , 170 , 166 , 118 , 60 , 215 , 66 , 37 , 241 , 220 , 240 , 128 , 28 , 56 , 104 , 76 , 137 , 30 , 35 , 222 , 169 , 187 , 250 , 44 , 117 , 91 , 153 , 228 , 200 , 34 , 95 , 200 , 89 , 29 , 51 , 195 , 233 , 16 , 28 , 252 , 179 , 87 , 205 , 161 , 39 , 169 , 164 , 227 , 169 , 206 , 162 , 207 , 163 , 39 , 16 , 250 , 195 , 88 , 77 , 74 , 217 , 136 , 111 , 168 , 241 , 74 , 77 , 217 , 122 , 243 , 200 , 230 , 242 , 17 , 32 , 95 , 125 , 178 , 50 , 50 , 64 , 90 , 55 , 190 , 186 , 70 , 123 , 6 , 218 , 80 , 175 , 153 , 136 , 20 , 58 , 28 , 192 , 64 , 88 , 246 , 70 , 243 , 168 , 210 , 116 , 170 , 190 , 51 , 220 , 64 , 83 , 208 , 97 , 104 , 93 , 126 , 203 , 186 , 120 , 216 , 69 , 195 , 158 , 67 , 94 , 95 , 78 , 186 , 169 , 199 , 65 , 175 , 189 , 105 , 109 , 166 , 178 , 41 , 32 , 45 , 138 , 172 , 200 , 80 , 120 , 59 , 23 , 128 , 161 , 189 , 75 , 193 , 148 , 127 , 221 , 200 , 82 , 247 , 5 , 55 , 51 , 196 , 49 , 33 , 5 , 138 , 239 , 32 , 79 , 125 , 29 , 155 , 93 , 198 , 197 , 136 , 217 , 20 , 154 , 217 , 183 , 136 , 77 , 119 , 104 , 149 , 187 , 237 , 247 , 148 , 204 , 82 , 184 , 144 , 122 , 252 , 51 , 104 , 173 , 155 , 133 , 87 , 5 , 168 , 83 , 222 , 227 , 25 , 59 , 140 , 148 , 206 , 166 , 213 , 130 , 22 , 134 , 84 , 173 , 36 , 102 , 117 , 52 , 120 , 40 , 30 , 214 , 7 , 61 , 219 , 206 , 56 , 133 , 166 , 103 , 28 , 169 , 212 , 25 , 84};
//	MATRIX_T A2[LEN] = {206 , 151 , 57 , 143 , 186 , 236 , 1 , 234 , 88 , 35 , 102 , 79 , 116 , 232 , 251 , 99 , 82 , 186 , 76 , 220 , 161 , 32 , 151 , 197 , 67 , 150 , 26 , 151 , 50 , 232 , 54 , 216 , 6 , 58 , 10 , 183 , 189 , 10 , 115 , 14 , 67 , 73 , 187 , 128 , 250 , 45 , 84 , 219 , 124 , 22 , 82 , 195 , 155 , 230 , 224 , 94 , 175 , 141 , 183 , 70 , 63 , 11 , 136 , 58 , 73 , 32 , 7 , 171 , 151 , 184 , 194 , 157 , 167 , 22 , 227 , 74 , 147 , 174 , 189 , 190 , 199 , 166 , 209 , 108 , 137 , 134 , 58 , 110 , 72 , 90 , 160 , 197 , 216 , 229 , 240 , 131 , 185 , 120 , 41 , 130 , 19 , 140 , 197 , 246 , 248 , 241 , 50 , 222 , 138 , 201 , 96 , 145 , 50 , 208 , 248 , 55 , 166 , 119 , 104 , 91 , 117 , 227 , 96 , 135 , 153 , 33 , 185 , 40 , 47 , 63 , 146 , 255 , 248 , 83 , 45 , 95 , 45 , 211 , 108 , 218 , 137 , 240 , 173 , 26 , 29 , 61 , 123 , 145 , 199 , 178 , 141 , 246 , 86 , 165 , 206 , 175 , 89 , 147 , 208 , 105 , 17 , 81 , 4 , 250 , 213 , 165 , 153 , 59 , 34 , 27 , 192 , 39 , 127 , 25 , 188 , 118 , 4 , 223 , 161 , 138 , 250 , 115 , 142 , 20 , 224 , 182 , 153 , 205 , 206 , 47 , 48 , 192 , 229 , 61 , 111 , 241 , 181 , 117 , 174 , 206 , 55 , 206 , 17 , 137 , 112 , 164 , 246 , 37 , 198 , 204 , 56 , 173 , 1 , 2 , 175 , 101 , 167 , 137 , 28 , 85 , 203 , 232 , 207 , 167 , 225 , 69 , 96 , 145 , 188 , 214 , 203 , 187 , 248 , 123 , 131 , 207 , 185 , 88 , 226 , 146 , 242 , 8 , 188 , 130 , 253 , 90 , 214 , 101 , 107 , 115 , 138 , 17 , 4 , 53 , 59 , 155 , 156 , 58 , 25 , 61 , 30 , 147 , 107 , 99 , 133 , 223 , 130 , 223 , 144 , 86 , 76 , 29 , 57 , 214 , 158 , 144 , 2 , 242 , 86 , 122 , 17 , 172 , 182 , 225 , 85 , 246 , 139 , 154 , 240 , 191 , 190 , 91 , 153 , 13 , 36 , 189 , 22 , 41 , 14 , 188};

	float Q[ROWS][ROWS];
	MakeEye(Q);
	MATRIX_T R[LEN] = {0};
	fixed_cs Q_L[Q_LEN];
	fixed_cs Q_R[Q_LEN];
	float R_re[ROWS][COLS] = {0};
	float A_re[ROWS][COLS] = {0};

	qr_GR_success = top(A1, A2, Q_L, Q_R, R);

	int count = 0;
	for (int i = 0; i < COLS; ++i)
	{
		for (int j = i; j < COLS; ++j)
		{
			R_re[i][j] = R[count];
			count += 1;
		}
	}

	int counts = 0;
	for (int i = 0; i < COLS; ++i)
	{
		for (int j = 0; j < i + 1; ++j)
		{
			Q[j][i] = Q_L[counts];
			Q[COLS - i - 1 + j][COLS * 2 - 1 - i] = Q_R[counts];
			counts++;
		}
		for (int j = 0; j < i + 1; ++j)
		{
			Q[j + COLS][i] = Q_L[counts];
			Q[COLS * 2 - i - 1 + j][COLS * 2 - 1 - i] = Q_R[counts];
			counts++;
		}
	}
	cout << "Q" << endl;
	PrintMatrixSquare(Q);

	MM(Q, R_re, A_re);
	PrintMatrix(A_re);
}
